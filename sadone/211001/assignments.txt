1. 컴파일러 언어와 인터프리터 언어에 대해 간단하게 서술

    1) "컴파일" 과정을 통해 동작하는 언어
    2) 상대적으로 속도가 빠름 - RPG 게이ㅁ등에 적합함
    ex) C, C++, C#
  (2)인터프리터 언어
    1) "컴파일" 과정 없이 한 줄 한 줄씩 읽으면서 동작하는 언어
    2) 1)의 과정으로 인해 컴파일러 언어에 비해 속도가 느림
    3) 대신 실행시킬 프로그램 없이 바로 실행이 가능함
    ex) Python, Ruby, Javascript

2. ES와 ECMA Script, 그리고 Vanilla Javascript는 무엇인지 간단하게 서술
  

3. Javascript에서 주로 사용되는 Variable Name Convention 두 가지는 무엇인가?
  (1) Snake Case - 언더바(_)를 통해 구분
    ex) sam_hentai
  (2) Camel Case - 대문자로 구분
    ex) samHentai
  + Pascal Case
    ex) SamHentai - (2)와 유사하지만 맨 앞이 대문자

4. 변수란 무엇인지 간단하게 서술(메모리에 대해 언급)
  - 변수는 어떤 값을 저장하기 위해 정의하는 것
    ex) var samHentai = 'TRUE'
  - 변수로 지정한 값은 메모리 공간에 저장이 된다(0x12345678 과 같은 곳에)
  - 변수는 그 '메모리 공간'을 구분하기 위해 우리가 이름을 붙여 지정하는 것
    ex) 0x12345678 메모리 공간은 samHentai 라는 변수로 지정되어 있다!

5. 변수 선언 시 let과 const를 사용한다. 이 둘의 특징은 무엇이고, 어떠한 차이가 있는지 서술
  (1) let - 변수 선언 후 해당 변수에 '재할당'이 가능할 수 있도록 하는 키워드
  (2) const - 변수 선언 후 해당 변수에 '재할당'이 불가능하게 되는 키워드 : 상수
  핵심은 재할당이 가능한지에 대한 여부 // 다만 값을 재할당 하면 기존 메모리에 덧쓰는게 아니라 새 메모리 공간을 할당하여 저장하는 것이기 때문에 메모리를 소모하게 될 것
  + var 로도 변수를 선언할 수 있는데 거의 쓰이지 않는다 - 6에서 계속

6. 변수 선언 시 var는 왜 쓰면 안 좋은지 서술
  - Hosting(호이스팅 이라 읽음)때문 : 추가필요
  - var 키워드로 선언할 시 undefined 값이 암묵적으로 할당됨 - 8의 (1)-4) 참고

7. 리터럴이란 무엇인지 간단하게 서술
  - 정의 : 사람이 이해할 수 있는 문자 또는 약속된 기호를 사용해 값을 생성하는 표기법
  - 컴퓨터는 이진법을 사용해 데이터를 이해하지만, '리터럴'을 사용해 사람이 이해 가능한 표기법을 사용, 컴퓨터가 실행할 수 있도록 하는 것을 말한다.
  - ex) 숫자 10을 넣으면, 컴퓨터가 알아서 1010으로 이해하는 것
  - 숫자 뿐 아니라 문자열이나 함수 등도 리터럴. 값을 생성하기 위한 미리 약속된 표기법

8. 데이터 타입은 크게 어떤 두 가지로 나뉘는지 서술
  (1) 원시 타입
    1) 숫자 타입
    2) 문자열 타입
    3) 불리언 타입 : true or false
    4) undefined 타입
    5) null 타입 : 여기는 아예 값이 '없다' 라는 것을 의도적으로 표현하기 위해 사용됨
    6) 심벌 타입
  (2) 객체 타입 : 객체, 함수, 배열 등...

9. 다음 변수를 탬플릿 문자열 문법을 이용해 출력하고자 한다. 어떻게 해야할까?
  let username = 'NoHack'; console.log(//내용//); <-- 결과가 My name is NoHack이라 출력되어야 한다.
  - //내용// : 'My name is' + NoHack

10. undefined와 null의 차이점은 무엇인지 서술
  - undefined는 말 그대로 해당 변수 등에 값이 전혀 정의되지 않음을 의미하고,
  - null은 해당 변수 등에 의도적으로 '값이 없음'을 나타내기 위해 사용됨
  - 8 참고
  
11. 아래와 같은 디렉토리 구조에서 weather.js 파일에 변경(로직 수정)이 일어났다. 그리고 갱신된 정보를 저장소(origin)에 메인 브랜치(main)로 올리려 하는데, 어떻게 해야 할까? (Git 명령어를 차례대로 적기)
  - 순서대로 기록
    git add weather.js
    git commit -m "update weather.js"
    git push origin main
