문제1. 함수 만들기
더하기, 빼기, 곱하기, 나누기 기능을 갖고 있는 4개의 함수 만들기
각 함수는 2개의 매개변수를 받고, 정의한 기능에 따라 계산 후 반환한다.
각 함수를 호출해보고, 그 값을 콘솔에 출력해 본다.

덧셈
function add(x, y) {
    return x+y;
}

뺄셈
function subtract(x, y) {
    return x-y;
}

곱셈
function multiply(x, y) {
    return x*y;
}

나눗셈
function divide(x, y) {
    return x/y;
}

문제2. 다음 링크의 글을 읽고, 호이스팅을 간단하게 설명하기
🔥🕺🏼 JavaScript Visualized: Hoisting

function, var, let, const에 대해 일어나는 호이스팅 현상들


Hoisting은 javascript만의 특성!

소스 평가 -> (TDZ)* -> 실행 과정

function. 함수의 경우 "소스 평가" 과정에서 메모리에 함수를 할당/등록하기 때문에 선언 이전에 작동해도 올바르게 작동함
var의 경우 'undefined'로 출력됨(메모리에 초기값 undefined가 등록되어 있기 때문임)
(TDZ)* -> let과 const의 경우에만 동작(참조할 수 없음 : 그러므로 let과 const는 선언 전에 실행할 경우 RefernceError가 뜸)


문제3. 함수형 프로그래밍이란 무엇인가?
순수함수, 일급객체(함수)를 포함하여 설명하기
어떤 장점이 있는지 설명하기

순수함수 : 함수 안에서만, 즉 함수 외부의 값에 영향을 주거나, 함수 외부에 의해 영향받지 않음!
일급객체 : '값의 성질을 갖는 객체'

순수함수만을 사용해 구성된 code가 '잘 짜여진 code'라고 할 수 있다
함수형 프로그래밍으로 소위 '예측 가능'하면서도 '직관적'인 코딩이 가능

문제4. 팩토리얼을 구하는 함수를 재귀(Recursive)로 구현하기
input: 5 --> factorial(5);
output:
< hint > 컴퓨터의 메모리 구조는 스택(Stack)인 것을 떠올리면 된다. 스택 구조라 함은 아래에서 위로 쌓이며, 제거할 때는 그 반대인 위에서 아래로 제거된다. 이를 Last In, First Out(LIFO) 또는 First In, Last Out(FILO)이라 부른다.

최초로 팩토리얼 함수를 호출하면, 스택에 그 함수가 쌓일 것이다. 그리고 내부에서 호출할 때마다, 최초로 호출된 함수 위에 계속해서 새롭게 호출한 함수들이 쌓일 것이다. 더 이상 호출할 함수가 없다면, 스택에 더 쌓일 것이 없기에, 하나씩 제거가 되면서 해당 함수의 결과를 아래의 함수(자신을 호출한 함수)에게 반환할 것이다.

이 힌트를 보고 구현해 본다면,

팩토리얼 함수 내부에서 팩토리얼 함수를 호출할 것이다. --> factorial(5), factorial(4), ...
조건을 걸어 어느 순간에는 더 이상 팩토리얼 함수를 호출되지 않도록 할 것이다. --> factorial(1)은 1이니까, if를 걸어 매개변수를 체크하면 될 것

팩토리얼 함수
function factorial(n) {
    if (n===1) {
        return 1;
    } else{
        return n * factorial(n-1)
    }
    
}